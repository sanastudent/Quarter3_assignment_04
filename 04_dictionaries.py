# -*- coding: utf-8 -*-
"""04_dictionaries.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FHGZguWgqKoPNXooiWEn3_vWjNmcEe7h
"""

#01
#This program counts the number of times each number appears in a list. It uses a dictionary to keep track of the information.

# Function to get user input and count the numbers
def get_number_counts():
    number_counts = {}

    while True:
        number = input("Enter a number: ")

        # If the user enters an empty input, stop the loop
        if number == "":
            break

        # Convert the input to an integer
        number = int(number)

        # Update the dictionary with the count of the number
        if number in number_counts:
            number_counts[number] += 1
        else:
            number_counts[number] = 1

    return number_counts

# Function to display the counts of the numbers
def display_counts(number_counts):
    for number, count in number_counts.items():
        print(f"{number} appears {count} times.")

# Main function to run the program
def main():
    number_counts = get_number_counts()  # Get the counts of the numbers
    display_counts(number_counts)  # Display the counts


# 02
# In this program we show an example of using dictionaries to keep track of information in a phonebook.
def read_phone_numbers():
    """
    Ask the user for names/numbers to story in a phonebook (dictionary).
    Returns the phonebook.
    """
    phonebook = {}                   # Create empty phonebook

    while True:
        name = input("Name: ")
        if name == "":
            break
        number = input("Number: ")
        phonebook[name] = number

    return phonebook


def print_phonebook(phonebook):
    """
    Prints out all the names/numbers in the phonebook.
    """
    for name in phonebook:
        print(str(name) + " -> " + str(phonebook[name]))


def lookup_numbers(phonebook):
    """
    Allow the user to lookup phone numbers in the phonebook
    by looking up the number associated with a name.
    """
    while True:
        name = input("Enter name to lookup: ")
        if name == "":
            break
        if name not in phonebook:
            print(name + " is not in the phonebook")
        else:
            print(phonebook[name])


def main_two():
    phonebook = read_phone_numbers()
    print_phonebook(phonebook)
    lookup_numbers(phonebook)


#03
# There's a small fruit shop nearby your house that you like to buy from. Since you buy several fruit at a time, you want to keep track of how much
# the fruit will cost before you go. Luckily you wrote down what fruits were available and how much one of each fruit costs.
# Write a program that loops through a dictionary of fruits, prompting the user to see how many of each fruit they want to buy, and then prints out the total
# combined cost of all of the fruits.


def main_three():
    fruits = {'apple': 1.5, 'durian': 50, 'jackfruit': 80, 'kiwi': 1, 'rambutan': 1.5, 'mango': 5}

    total_cost = 0
    for fruit_name in fruits:
        price = fruits[fruit_name]
        amount_bought = int(input("How many (" + fruit_name + ") do you want to buy?: "))
        total_cost += (price * amount_bought)

    print("Your total is $" + str(total_cost))

#04
# You want to be safe online and use different passwords for different websites. However, you are forgetful at times and want to make a program that can match which
# password belongs to which website without storing the actual password!
# This can be done via something called hashing. Hashing is when we take something and convert it into a different, unique identifier. This is done using a hash function.
# Luckily, there are several resources that can help us with this.

from hashlib import sha256

def login(email, stored_logins, password_to_check):
    """
    Returns True if the hash of the password we are checking matches the one in stored_logins
    for a specific email. Otherwise, returns False.

    email: the email we are checking the password for
    stored_logins: a dictionary pointing from an email to its hashed password
    password_to_check: a password we want to test alongside the email to login with
    """

    # Check if the hashed password to check matches the stored one for that email
    if stored_logins[email] == hash_password(password_to_check):
        return True

    return False

# There is no need to edit code beyond this point

def hash_password(password):
    """
    Takes in a password and returns the SHA256 hashed value for that specific password.

    Inputs:
        password: the password we want

    Outputs:
        the hashed form of the input password
    """

    return sha256(password.encode()).hexdigest()

def main_four():
    # stored_logins is a dictionary with emails as keys and hashed passwords as values
    stored_logins = {
        "example@gmail.com": "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",  # 'password'
        "code_in_placer@cip.org": "973607a4ae7b4cf7d96a100b0fb07e8519cc4f70441d41214a9f811577bb06cc",  # 'Karel'
        "student@stanford.edu": "882c6df720fd99f5eebb1581a1cf975625cea8a160283011c0b9512bb56c95fb"   # '123!456?789'
    }

    # Test the login function with different emails and passwords
    print(login("example@gmail.com", stored_logins, "word"))        # Should print False
    print(login("example@gmail.com", stored_logins, "password"))    # Should print True

    print(login("code_in_placer@cip.org", stored_logins, "Karel"))   # Should print True
    print(login("code_in_placer@cip.org", stored_logins, "karel"))   # Should print False

    print(login("student@stanford.edu", stored_logins, "password"))  # Should print False
    print(login("student@stanford.edu", stored_logins, "123!456?789"))  # Should print True







# Run the program
if __name__ == "__main__":
    main()
    main_two()
    main_three()
    main_four(


    )