# -*- coding: utf-8 -*-
"""06_function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nSZrU4pNiMu6ZDLxdOGs5u7mpV2XY_ev
"""

import random
DONE_LIKELIHOOD = 0.5  # Define the likelihood of "done()" returning True



#01
# Write a function that takes two numbers and finds the average betwee the two.

def average(a: float,b:float):
    sum = a + b
    return sum/2

def main():
    avg_1 = average(0,10)
    avg_2 = average(8,10)

    final = average(avg_1,avg_2)
    print("avg_1",avg_1)
    print("avg_2",avg_2)
    print("final",final)


# 02
# Fill out the chaotic_counting() function, which prints the numbers from 1 to 10, but with a catch. We've written a done() function which
# returns True with likelihood DONE_LIKELIHOOD -- at each number, before printing the number, you should call done() and check if it returns
#  True or not. If done() returns True, we're done counting, and you should use a return statement to end the chaotic_counting() function execution
# and resume execution of main(), which will print "I'm done.". We've written main() for you -- check it out! Notice that we'll only print
# "I'm done" from main() once chaotic_counting() is done with its execution.


def chaotic_counting():
    for i in range(10):
        curr_num = i + 1
        if done():
            return # this ends the function execution, so we'll get back to the main() function!
        print(curr_num)

# There is no need to edit code beyond this point

def done():
    """ Returns True with a probability of DONE_LIKELIHOOD """
    if random.random() < DONE_LIKELIHOOD:
        return True
    return False

def main_two():
    print("I'm going to count until 10 or until I feel like stopping, whichever comes first.")
    chaotic_counting()
    print("I'm done")

# 03
# Fill out the function count_even(lst) which  first populates a list by prompting the user for integers until they press enter
#  (please use the prompt "Enter an integer or press enter to stop: "), and then prints the number of even numbers in the list.

def count_even(lst):

    count = 0
    for num in lst:
        if num % 2 == 0:
            count += 1

    print(count)

def get_list_of_ints():
        lst = [] # Make an empty list to integers
        user_input = input("Enter an integer or press enter to stop:")  # Get user input for an integar
        while user_input != "":  # while the user doesn't enter nothing...
            lst.append(int(user_input))  # Cast the user input into an integer and add it to our list
            user_input = input("Enter an integer or press enter to stop.")  # Get the next user input

        return lst

def main_three():
        lst = get_list_of_ints()
        count_even(lst)

# 04.
# fill out the double(num) function to learn the result of multiplying num by 2. We've written a main() function for you which asks the user for
# a number, calls your code for double(num), and prints the result.

def double(num:int):
     return num * 2

def main_four():
     num = int(input("Enter a number:"))
     num_times_2 = double(num)
     print("Double that is",num_times_2)

# 06
# fill out the get_name() function to return your name as a string! We've written a main() function for you which calls your function to retrieve
# your name and then prints it in a greeting.

def get_name():
     return "Sana"

def main_five():
     name = get_name()
     print("Howdy", name, "! ðŸ¤ ")

#  07
# 10 even 11 odd 12 even 13 odd 14 even 15 odd 16 even 17 odd 18 even 19 odd

def main_six():
     for i in range(10):
          if is_odd(i):
               print(f'{i} is odd')
          else :
               print(f'{i} is even')

def is_odd(value:int):
     remainder = value % 2  # 0 if value is divisible by 2, 1 if it isn't
     return remainder == 1


# 08.
# Write the helper function print_divisor(num) , which takes in a number and prints all of it's divisors (all the numbers from 1 to num inclusive)
# that num can be cleanly divided by(there is no remainder to the division. Don't forget to call your function in main())

def print_divisors(num:int):
     print("Here are the divisor of: ", num)
     for i in range(num):
          curr_divisor = i + 1
          if num % curr_divisor == 0:
               print(curr_divisor)

def main_seven():
     num = int(input("Enter a number:"))
     print_divisors(num)


# 09
# Fill out print_multiple(message, repeats), which takes as parameters a string message to print, and an integer repeats number of times
#  to print message. We've written the main() function for you, which prompts the user for a message and a number of repeats.

def print_multiple(message,repeats):
     for _ in range(repeats):
          print(message)

def main_eight():
     message = input("Enter a message:")
     repeats = int(input("How many times do you want to print the message?"))

     print_multiple(message,repeats)



# 10
# Implement the helper function make_sentence(word, part_of_speech) which will take a string word and an integer part_of_speech as parameters
# and, depending on the part of speech, place the word into one of three sentence templates (or one from your imagination!):
##  If part_of_speech is 0, we will assume the word is a noun and use the template: "I am excited to add this ____ to my vast collection of them!"
##  If part_of_speech is 1, we will assume the word is a verb use the template: "It's so nice outside today it makes me want to ____!"
# If part_of_speech is 2, we will assume the word is an adjective and use the template: "Looking out my window, the sky is big and ____!"
# make_sentence(word, part_of_speech) should not return anything, just print the correct sentence with the word filled in the blank.

def make_sentence(word,part_of_speech):
     if part_of_speech == 0:
          # noun
        print(f"I am excited to add this {word} to my vast collection of them!")
     elif part_of_speech == 1:
          # verb
        print(f"It's so nice outside today it makes me want to {word}!")
     elif part_of_speech == 2 :
          # adjective
          print(f"Looking out my window, the sky is big and {word}!")
     else:
          print("Part of speech must be 0,1 or 2! Can't make a sentence.")

def main_nine():
     word : str = input("Please type a noun, verb or adjective:")
     print("Is this a noun,verb or adjective?")
     part_of_speech = int(input("Type 0 for noun, 1 for verb and 2 for adjective:"))
     make_sentence(word,part_of_speech)

# 11
# Write a function called print_ones_digit, which takes as a parameter an integar num and prints its ones digit. The modulo (remainder)
# operator %, should be helpful to you here. Call your function from main().
#
#


def print_one_digit(num):
     one_digit = num % 10
     print(one_digit)

def main_ten():
     num = int(input("Enter a number:"))
     print_one_digit(num)



if __name__ == '__main__':
    main()
    main_two()
    main_three()
    main_four()
    main_five()
    main_six()
    main_seven()
    main_eight()
    main_nine()
    main_ten()