# -*- coding: utf-8 -*-
"""02_lists_canva.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PmxW-w1DQrWcbp6NRSS_fdTflwxMuX5Q
"""

# 03
# Implement an 'eraser' on a canvas.
#The canvas consists of a grid of blue 'cells' which are drawn as rectangles on the screen. We then create an eraser rectangle which,
#  when dragged around the canvas, sets all of the rectangles it is in contact with to white.




import tkinter as tk # Python library hai jo graphical user interfaces(GUI) banane k liye use hoti hai.
# means agr hme buttons, windows,test boxes, libraries ,bnani haito tkinter ka use krte hain

class EraserCanvas:
    def __init__(self, master):
        self.master = master
        self.canvas = tk.Canvas(master, width=600, height=600)
        self.canvas.pack()

        self.grid_size = 30  # Size of each cell
        self.grid = []  # Will hold the rectangle IDs
        self.create_grid()

        self.eraser_size = self.grid_size  # Eraser size (1 grid cell)
        self.eraser = None

        self.create_eraser()
        self.canvas.bind("<B1-Motion>", self.move_eraser)  # Detect mouse dragging

    def create_grid(self):
        """Creates a grid of blue cells."""
        for row in range(0, 600, self.grid_size):
            row_cells = []
            for col in range(0, 600, self.grid_size):
                cell = self.canvas.create_rectangle(col, row, col + self.grid_size, row + self.grid_size, fill='blue', outline='black')
                row_cells.append(cell)
            self.grid.append(row_cells)

    def create_eraser(self):
        """Creates the eraser rectangle."""
        self.eraser = self.canvas.create_rectangle(0, 0, self.eraser_size, self.eraser_size, fill='white', outline='black')

    def move_eraser(self, event):
        """Moves the eraser around and sets affected cells to white."""
        # Get mouse position
        mouse_x, mouse_y = event.x, event.y

        # Calculate the top-left position of the eraser (snap to the grid)
        eraser_x1 = (mouse_x // self.grid_size) * self.grid_size
        eraser_y1 = (mouse_y // self.grid_size) * self.grid_size
        eraser_x2 = eraser_x1 + self.eraser_size
        eraser_y2 = eraser_y1 + self.eraser_size

        # Move the eraser
        self.canvas.coords(self.eraser, eraser_x1, eraser_y1, eraser_x2, eraser_y2)

        # Check which cells the eraser is in contact with and erase them
        for row in range(len(self.grid)):
            for col in range(len(self.grid[row])):
                cell = self.grid[row][col]
                cell_coords = self.canvas.coords(cell)
                if self.is_overlapping(cell_coords, eraser_x1, eraser_y1, eraser_x2, eraser_y2):
                    self.canvas.itemconfig(cell, fill='white')

    def is_overlapping(self, cell_coords, eraser_x1, eraser_y1, eraser_x2, eraser_y2):
        """Checks if the eraser overlaps with a grid cell."""
        cell_x1, cell_y1, cell_x2, cell_y2 = cell_coords
        return not (eraser_x2 <= cell_x1 or eraser_x1 >= cell_x2 or eraser_y2 <= cell_y1 or eraser_y1 >= cell_y2)

# Set up the Tkinter root window
root = tk.Tk()
eraser_canvas = EraserCanvas(root)
root.mainloop()